--- gdbserver/remote-utils.cc.orig
+++ gdbserver/remote-utils.cc
@@ -66,6 +66,8 @@

 #if USE_WIN32API
 #include <ws2tcpip.h>
+#else
+#include <sys/un.h>
 #endif

 #ifndef HAVE_SOCKLEN_T
@@ -220,6 +222,42 @@
 #endif
   socklen_t tmp;

+  // The Android NDK uses Unix domain sockets because applications
+  // aren't allowed to bind to localhost TCP sockets, and developers
+  // debugging on production devices can't get root.
+  // Typical ndk-gdb usage is "gdbserver +debug-socket --attach 123".
+  if (name[0] == '+')
+    {
+#ifdef USE_WIN32API
+      error ("Only <host>:<port> is supported on this platform.");
+#else
+      struct sockaddr_un sockaddr;
+      socklen_t sockaddrlen;
+
+      listen_desc = socket (AF_UNIX, SOCK_STREAM, 0);
+      if (listen_desc == -1)
+        perror_with_name ("Can't create Unix domain socket");
+
+      /* Skip the initial '+'. */
+      name++;
+
+      memset (&sockaddr, 0, sizeof sockaddr);
+      sockaddr.sun_family = AF_UNIX;
+      snprintf (sockaddr.sun_path, sizeof (sockaddr.sun_path), "%s", name);
+      sockaddrlen = sizeof (sockaddr.sun_family) +
+          strlen (sockaddr.sun_path) + 1;
+
+      unlink (sockaddr.sun_path);
+
+      if (bind (listen_desc, (struct sockaddr *) &sockaddr, sockaddrlen)
+          || listen (listen_desc, 1))
+        perror_with_name ("Can't bind Unix domain socket");
+
+      cs.transport_is_reliable = 1;
+#endif
+      return;
+    }
+
   remote_is_stdio = 0;
   if (strcmp (name, STDIO_CONNECTION_NAME) == 0)
     {
@@ -322,7 +360,18 @@
     error ("Only HOST:PORT is supported on this platform.");
 #endif

-  if (strcmp (name, STDIO_CONNECTION_NAME) == 0)
+  if (name[0] == '+')
+    {
+      /* Skip the initial '+'. */
+      name++;
+
+      fprintf (stderr, "Listening on Unix domain socket '%s'\n", name);
+      fflush (stderr);
+
+      /* Register the event loop handler.  */
+      add_file_handler (listen_desc, handle_accept_event, NULL, "remote-listen");
+    }
+  else if (strcmp (name, STDIO_CONNECTION_NAME) == 0)
     {
       fprintf (stderr, "Remote debugging using stdio\n");

